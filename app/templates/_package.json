{
  "name": "<%= moduleName %>",
  "version": "0.1.0",
  "description": "<%= dequote(moduleDesc) %>",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "doctoc": "doctoc README.md && if [ -f CONTRIBUTING.md ]; then doctoc CONTRIBUTING.md; fi && if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != '' ]]; then git add README.md CONTRIBUTING.md && git commit --no-verify -m'table of contents update'; fi",
    "note0": "the following options are from joeybaker/generator-iojs as a reference for future exploration",
    "test-browser": "browserify -t coverify test/test.js | tap-closer | smokestack -b chrome | tap-spec",
    "test-server": "covert test/*.js | tap-spec",
    "test-all": "npm run test-server && npm run test-browser",
    "tdd-server": "nodemon -x npm -i node_modules/ -- run test-server",
    "tdd-browser": "smokestack-watch test/*.js -t coverify | tap-spec",
    "note1": "we can't have nice things. prepublish also runs on npm install https://github.com/npm/npm/issues/6394 in-publish hacks around this",
    "prepublish": "in-publish && npm prune && npm run gitPush || in-install",
    "note2": "eslint will always pull from the global eslintrc file, disable that so that we're only looking at the local",
    "note3": "travis doesn't play nicely with !#/bin/bash in the script file, so we have to explicitly set bash",
    "lint": "/bin/bash -c 'source ./scripts.sh && lint'",
    "requireGitClean": "/bin/bash -c 'source ./scripts.sh && git_require_clean_work_tree'",
    "nsp": "nsp audit-package",
    "note4": "--no-verify skips the commit hook",
    "dmn": "dmn gen -f . && if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != '' ]]; then git add .npmignore && git commit --no-verify -m'update npmignore'; fi",
    "gitPull": "git pull --rebase origin master",
    "gitPush": "git push --follow-tags --no-verify && git push --tags --no-verify",
    "release": "source ./scripts.sh && npm run requireGitClean && npm run gitPull && npm run dmn && npm run doctoc && npm run lint && npm test && npm_release $@"
    "test": "<%
      if (useGrunt) {
        print('node_modules/.bin/grunt ci');
      } else {
        switch (testFramework) {
          case 'mocha':
            print('node_modules/.bin/mocha -R list test/*.js');
            break;

          case 'redtape':
          case 'tape':
            print('node_modules/.bin/tape test/*.js');
            break;
        }
      }
    %>"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/<%= githubName %>/<%= moduleName %>"
  },
  "keywords": <%= JSON.stringify(keywords) %>,
  "author": "<%= dequote(author) %>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/<%= githubName %>/<%= moduleName %>/issues"
  },
  "dependencies": {
<% if (moduleType == 'cli') { %>
      "get-stdin": "^4.0.1"
<% } %>
  },
  "devDependencies": {
<%
    switch (assertionLibrary) {
      case 'expect.js':
        print('    "expect.js": "~0.3.0",');
        break;

      case 'chai.expect':
      case 'chai.should':
        print('    "chai": "~1.10.0",');
        break;

      default:
        break;
    }

    if (useGrunt) {
%>
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1",
<%
      switch (testFramework) {
        case 'mocha':
          print('    "grunt-mocha-cli": "~1.1.0",');
          break;

        case 'redtape':
          print('    "redtape": "~0.1.0",\n');
        case 'tape':
          print('    "tape": "~2.3.2",\n');
          print('    "grunt-tape": "~0.0.1",');
          break;
      }%>
    "grunt-complexity": "~0.1.3",
    "grunt-cli": "~0.1.9"<%
      } else {
        switch (testFramework) {
          case 'mocha':
            print('    "jshint": "^2.7.0",');
            print('    "mocha": "~2.1.0"');
            break;

          case 'redtape':
            print('    "redtape": "~0.1.0",\n');

          case 'tape':
            print('    "tape": "~2.3.2"');
            break;
        }
      }%>
  }
}
